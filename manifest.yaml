# Example written in yaml (toml and json are also acceptable)

id: coracle
title: "coracle"
version: 0.4.2.0
release-notes: |
  - Require signer on some routes
  - Add group notes to group notifications
  - Add badges to all notification page tabs
  - Use better search algorithm and show loaded profiles in global search
  - Improve group invite deliverability
license: MIT
wrapper-repo: "https://github.com/hzrd149/coracle-startos"
upstream-repo: "https://github.com/coracle-social/coracle"
support-site: "https://github.com/coracle-social/coracle/issues"
marketing-site: "https://app.coracle.social"
build: ["make"]
description:
  short: A Nostr client that makes relays a first-class concept
  long: |
    Coracle is a web client for the Nostr protocol focused on pushing the boundaries of what's unique about nostr, including relay selection and management, web-of-trust based moderation and content recommendations, and privacy protection.
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  # Default = image.tar
  # docker-images: image.tar
# ----- This section commented out until we support long-running containers -----
# The main action for initializing the service. This can be script to utilize the eOS scripting apis, or docker.
# main:
#   type: script
# # Defines the containers needed to run the main and mounted volumes
# containers:
#   main:
#     # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
#     image: main
#     # Specifies where to mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes.
#     mounts:
#       # Specifies where on the service's file system its persistence directory should be mounted prior to service startup
#       main: /root
# ----- END commented section -----
main:
  # Docker is currently the only action implementation
  type: docker
  # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
  image: main
  # The executable binary for starting the initialization action. For docker actions, this is typically a "docker_entrypoint.sh" file. See the Dockerfile and the docker_entrypoint.sh in this project for additional details.
  entrypoint: "docker_entrypoint.sh"
  # Any arguments that should be passed into the entrypoint executable
  args: []
  # Specifies where to mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes.
  mounts:
    # Specifies where on the service's file system its persistence directory should be mounted prior to service startup
    main: /root
    cert: /mnt/cert
# This is where health checks would be defined - see a more advanced example in https://github.com/Start9Labs/start-pages-wrapper
health-checks:
  web-ui:
    name: Web UI
    success-message: coracle is ready
    type: script
config: ~
properties: ~
#  type: script
# This denotes any data, asset, or pointer volumes that should be connected when the "docker run" command is invoked
volumes:
  # This is the image where files from the project asset directory will go
  main:
    type: data
  cert:
    type: certificate
    interface-id: main
# This specifies how to configure the port mapping for exposing the service over TOR and LAN (if applicable). Many interfaces can be specified depending on the needs of the service. If it can be launched over a Local Area Network connection, specify a `lan-config`. Otherwise, at minimum, a `tor-config` must be specified.
interfaces:
  # This key is the internal name that the OS will use to configure the interface
  main:
    # A human readable name for display in the UI
    name: User Interface
    # A descriptive description of what the interface does
    description: A user interface that is expected to host coracle web app.
    tor-config:
      # Port mappings are from the external port to the internal container port
      port-mapping:
        80: "80"
        443: "3443"
    # Port mappings are from the external port to the internal container port
    lan-config:
      443:
        ssl: true
        internal: 8080
    # Denotes if the service has a user interface to display
    ui: true
    # Denotes the protocol specifications used by this interface
    protocols:
      - tcp
      - http
dependencies: {}
# Specifies how backups should be run for this service. The default StartOS provided option is to use the duplicity backup library on a system image (compat)
backup:
  create:
    # Currently, only docker actions are supported.
    type: docker
    # The docker image to use. In this case, a pre-loaded system image called compat
    image: compat
    # Required if the action uses a system image. The default value is false.
    system: true
    # The executable to run the command to begin the backup create process
    entrypoint: compat
    # Arguments to pass into the entrypoint executable. In this example, the full command run will be: `compat duplicity coracle /mnt/backup /root/data`
    args:
      - duplicity
      - create
      - /mnt/backup
      # For duplicity, the backup mount point needs to be something other than `/root`, so we default to `/root/data`
      - /root/data
    mounts:
      # BACKUP is the default volume that is used for backups. This is whatever backup drive is mounted to the device, or a network filesystem.
      # The value here donates where the mount point will be. The backup drive is mounted to this location.
      BACKUP: "/mnt/backup"
      main: "/root/data"
  # The action to execute the backup restore functionality. Details for the keys below are the same as above.
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]
